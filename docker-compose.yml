x-environment: &default-environment
  POSTGRES_DB: trademarks
  POSTGRES_USER: micro
  POSTGRES_PORT: 5432
  CELERY_BROKER_URL: redis://redis:6379/0
  REDIS_URL: redis://redis:6379/0
  REDIS_URL_DB: redis://redis:6379/1
  ALLOWED_HOSTS: "*"
  DEBUG_STATUS: "True"
  POSTGRES_PASSWORD: de3094
  DJANGO_SECRET_KEY: a93f6b0216523d059ee5d1cf5217fc1484a5fd2dc460344f2ad4a054723147f7

services:
  db:
    image: postgres:17
    deploy:
      replicas: 1
      placement:
        constraints: [node.role == manager]
    environment:
      <<: *default-environment
      # POSTGRES_PASSWORD_FILE: /run/secrets/POSTGRES_PASSWORD
    # secrets:
    #   - POSTGRES_PASSWORD
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-net

  redis:
    image: redis:7
    deploy:
      replicas: 1
    command: ["redis-server", "--appendonly", "yes"]
    volumes:
      - redis_data:/data
    networks:
      - app-net

  # This is an on-call service, which collects static, runs migrations, and then exits.
  migrator:
    image: debeski/trademarks:swarm
    command: >
      /bin/sh -c '
      python manage.py migrator'
    entrypoint: ["/app/entrypoint.sh"]
    environment:
      <<: *default-environment
    networks:
      - app-net
    deploy:
      replicas: 1
      restart_policy:
        condition: none
    depends_on:
      - db
      - redis

  web:
    image: debeski/trademarks:swarm  # Build and push this image
    deploy:
      replicas: 3
      update_config:
        parallelism: 1
        delay: 30s
      restart_policy:
        condition: on-failure
        max_attempts: 3
    ports:
      - "8420:8000"
    user: "1001:1001"
    command: >
      /bin/sh -c '
      if [ "$DEBUG_STATUS" = "True" ]; then
        python manage.py runserver 0.0.0.0:8000
      else
        gunicorn -c /app/gunicorn.py
      fi'
    # secrets:
    #   - DJANGO_SECRET_KEY
    #   - POSTGRES_PASSWORD
    entrypoint: ["/app/entrypoint.sh"]
    environment:
      <<: *default-environment
      INIT_DELAY: 10  # Random delay for initialization
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://localhost:8000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    volumes:
      - media_volume:/app/media
      - static_volume:/app/staticfiles
      - logs_volume:/app/logs
    networks:
      - app-net
    depends_on:
      - db
      - redis

  celery:
    image: debeski/trademarks:swarm
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure
    command: ["python", "-m", "celery", "-A", "core", "worker", "--loglevel=info"]
    # secrets:
    #   - DJANGO_SECRET_KEY
    #   - POSTGRES_PASSWORD
    entrypoint: ["/app/entrypoint.sh"]
    environment:
      <<: *default-environment
    networks:
      - app-net
    depends_on:
      - db
      - redis

  db-backup:
    image: postgres:17
    deploy:
      replicas: 1
      placement:
        constraints: [node.role == manager]
    networks:
      - app-net
    volumes:
      - db_backups:/backups
    environment:
      <<: *default-environment
      BACKUP_INTERVAL: "86400"  # 24 hours in seconds
      RETENTION_DAYS: "7"
    # secrets:
    #   - POSTGRES_PASSWORD
    command: >
      bash -c '
      while true; do
          export PGPASSWORD=$$POSTGRES_PASSWORD
          backup_file="/backups/backup_$$(date +%Y-%m-%d_%H-%M-%S).pgdump"
          
          echo "Starting backup: $$backup_file"
          pg_dump -Fc -h db -U $$POSTGRES_USER $$POSTGRES_DB -f $$backup_file
          
          if [ $$? -eq 0 ]; then
              echo "Backup successful: $$backup_file"
              find /backups -name "*.pgdump" -mtime +$$RETENTION_DAYS -delete
          else
              echo "Backup failed!" >&2
              rm -f $$backup_file
          fi
          
          sleep $$BACKUP_INTERVAL
      done'
    depends_on:
      - db

volumes:
  postgres_data:
  redis_data:
  media_volume:
  static_volume:
  logs_volume:
  db_backups:

# secrets:
#   DJANGO_SECRET_KEY:
#     external: true
#   POSTGRES_PASSWORD:
#     external: true


networks:
  app-net:
    driver: overlay
